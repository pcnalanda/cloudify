version: '3.8'

services:
  nginx_lb:
    image: nginx:latest
    container_name: nginx_lb
    ports:
      - "8080:80"  # Expose the load balancer on host port 8080
    volumes:
      - ./nginx/nginx_lb.conf:/etc/nginx/nginx.conf  # Nginx config for load balancing
      - ./nginx/cache:/var/cache/nginx  # Cache path
      - ./nginx/logs:/var/log/nginx  # Log files
    depends_on:
      - web1
      - web2
      - web3
      - web4_nginx
      - web5_nginx
      - nodejs
      - springboot
    networks:
      - internal
  web1:
    image: php:7.4-apache
    build: 
      context: .
      dockerfile: Dockerfile-php-apache
    container_name: web1
    ports:
      - "8081:80"  # Map Apache container to host port 8081
    volumes:
      - ./pcv_projects/default_server:/var/www/html
      - ./apache/server-name.conf:/etc/apache2/conf-available/server-name.conf
    environment:
      - SERVER_ID=web1
      - MEMCACHED_HOST=memcached
      - MEMCACHED_PORT=11212  # Custom Memcached port
      - PHP_SESSION_SAVE_HANDLER=memcached
      - PHP_SESSION_SAVE_PATH="memcached:11212"  # Custom Memcached port
      - REDIS_HOST=redis
    networks:
      - internal
    command: >
      /bin/sh -c "ln -s /etc/apache2/conf-available/server-name.conf /etc/apache2/conf-enabled/server-name.conf && apache2-foreground"
  web2:
    image: php:7.4-apache
    build: 
      context: .
      dockerfile: Dockerfile-php-apache
    container_name: web2
    ports:
      - "8082:80"  # Map Apache container to host port 8082
    volumes:
      - ./pcv_projects/server2:/var/www/html
      - ./apache/server-name.conf:/etc/apache2/conf-available/server-name.conf
    environment:
      - SERVER_ID=web2
      - MEMCACHED_HOST=memcached
      - MEMCACHED_PORT=11212  # Custom Memcached port
      - PHP_SESSION_SAVE_HANDLER=memcached
      - PHP_SESSION_SAVE_PATH="memcached:11212"  # Custom Memcached port
      - REDIS_HOST=redis
    networks:
      - internal
    command: >
      /bin/sh -c "ln -s /etc/apache2/conf-available/server-name.conf /etc/apache2/conf-enabled/server-name.conf && apache2-foreground"
  web3:
    image: php:7.4-apache
    build: 
      context: .
      dockerfile: Dockerfile-php-apache
    container_name: web3
    ports:
      - "8083:80"  # Map Apache container to host port 8083
    volumes:
      - ./pcv_projects/default_server:/var/www/html
      - ./apache/server-name.conf:/etc/apache2/conf-available/server-name.conf
    environment:
      - SERVER_ID=web3
      - MEMCACHED_HOST=memcached
      - MEMCACHED_PORT=11212  # Custom Memcached port
      - PHP_SESSION_SAVE_HANDLER=memcached
      - PHP_SESSION_SAVE_PATH="memcached:11212"  # Custom Memcached port
      - REDIS_HOST=redis
    networks:
      - internal
    command: >
      /bin/sh -c "ln -s /etc/apache2/conf-available/server-name.conf /etc/apache2/conf-enabled/server-name.conf && apache2-foreground"
  web4_nginx:
    image: nginx:latest
    container_name: web4_nginx
    ports:
      - "8084:80"  # Map Nginx container to host port 8084
    volumes:
      - ./pcv_projects/default_server:/var/www/html  # Your project directory
      - ./nginx/nginx_webserver4.conf:/etc/nginx/nginx.conf  # Nginx web server config
      - ./nginx/snippets:/etc/nginx/snippets  # Snippets directory for fastcgi
    environment:
      - SERVER_ID=web4_nginx
      - MEMCACHED_HOST=memcached
      - MEMCACHED_PORT=11212  # Custom Memcached port
      - PHP_SESSION_SAVE_HANDLER=memcached
      - PHP_SESSION_SAVE_PATH="memcached:11212"  # Custom Memcached port
      - REDIS_HOST=redis
    depends_on:
      - php_fpm_web4_nginx  # Depends on PHP-FPM for handling PHP requests
    networks:
      - internal

    # PHP-FPM Service
  php_fpm_web4_nginx:
    image: php:7.4-fpm
    container_name: php_fpm_web4_nginx
    ports:
      - "9000:9000"  # PHP-FPM for web5_nginx on a different port
    volumes:
      - ./pcv_projects/default_server:/var/www/html  # web4_nginx PHP files
    networks:
      - internal

  web5_nginx:
    image: nginx:latest
    container_name: web5_nginx
    ports:
      - "8085:80"  # Map Nginx container to host port 8085
    volumes:
      - ./pcv_projects/server2:/var/www/html  # Your project directory
      - ./nginx/nginx_webserver5.conf:/etc/nginx/nginx.conf  # Nginx web server config
      - ./nginx/snippets:/etc/nginx/snippets  # Snippets directory for fastcgi
    environment:
      - SERVER_ID=web5_nginx
      - MEMCACHED_HOST=memcached
      - MEMCACHED_PORT=11212  # Custom Memcached port
      - PHP_SESSION_SAVE_HANDLER=memcached
      - PHP_SESSION_SAVE_PATH="memcached:11212"  # Custom Memcached port
      - REDIS_HOST=redis
    depends_on:
      - php_fpm_web5_nginx  # Depends on PHP-FPM for handling PHP requests
    networks:
      - internal

  # PHP-FPM Service
  php_fpm_web5_nginx:
    image: php:7.4-fpm
    container_name: php_fpm_web5_nginx
    ports:
      - "9001:9000"  # PHP-FPM for web5_nginx on a different port
    volumes:
      - ./pcv_projects/server2:/var/www/html  # web5_nginx PHP files
    networks:
      - internal

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"  # Zookeeper port
    networks:
      - internal

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"  # Kafka port
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:9093
    depends_on:
      - zookeeper
    networks:
      - internal
      
  nodejs:
    build: 
      context: ./nodejs_app
    container_name: nodejs
    ports:
      - "3000:3000"
    networks:
      - internal   

  springboot:
    build: 
      context: ./springboot-app
    container_name: springboot
    volumes:
      - ./springboot-app/src:/app/src
      - ./springboot-app/target:/app/target
    environment:
      - "SPRING_DEVTOOLS_RESTART_ENABLED=true"
    ports:
      - "8086:8080"
    networks:
      - internal

  mysql_master_database:
    image: mysql:8.0.30
    container_name: mysql_master_database
    restart: unless-stopped
    ports:
      - "3340:3306"  # Map MySQL master to host port 3340
    environment:
      MYSQL_ROOT_PASSWORD: S3cret
      MYSQL_DATABASE: pcv_test_db
      MYSQL_USER: pcv
      MYSQL_PASSWORD: password
      TZ: UTC
    volumes:
      - ./master.cnf:/etc/mysql/conf.d/master.cnf
      - ./mysql/master_database:/var/lib/mysql
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Mount initialization script
    networks:
      - internal
  mysql_slave1_database:
    image: mysql:8.0.30
    container_name: mysql_slave1_database
    restart: unless-stopped
    depends_on:
      - mysql_master_database
    ports:
      - "3341:3306"  # Map MySQL slave to host port 3341
    environment:
      MYSQL_ROOT_PASSWORD: S3cret
      MYSQL_DATABASE: pcv_test_db
      MYSQL_USER: pcv
      MYSQL_PASSWORD: password
      TZ: UTC
    volumes:
      - ./slave1.cnf:/etc/mysql/conf.d/slave1.cnf
      - ./mysql/slave1_database:/var/lib/mysql
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Mount initialization script
    networks:
      - internal

  mysql_slave2_database:
    image: mysql:8.0.30
    container_name: mysql_slave2_database
    restart: unless-stopped
    depends_on:
      - mysql_master_database
    ports:
      - "3342:3306"  # Map MySQL slave to host port 3342
    environment:
      MYSQL_ROOT_PASSWORD: S3cret
      MYSQL_DATABASE: pcv_test_db
      MYSQL_USER: pcv
      MYSQL_PASSWORD: password
      TZ: UTC
    volumes:
      - ./slave2.cnf:/etc/mysql/conf.d/slave2.cnf
      - ./mysql/slave2_database:/var/lib/mysql
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Mount initialization script
    networks:
      - internal

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"  # Map MongoDB container to host port 27017
    volumes:
      - ./mongodb/data:/data/db
    networks:
      - internal

  memcached:
    image: memcached:latest
    container_name: memcached
    ports:
      - "11212:11211"  # Custom Memcached port mapping
    networks:
      - internal

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6380:6379"  # Custom Redis port mapping
    volumes:
      - ./redis/data:/data
    networks:
      - internal

networks:
  internal:
    name: internal
